usage: denoise micrographs with various denoising algorithms
       [-h] [-d DEVICE] [-o OUTPUT] [--suffix SUFFIX] [--format FORMAT_]
       [--normalize] [--stack] [--save-prefix SAVE_PREFIX]
       [-m MODEL [MODEL ...]] [-a DIR_A [DIR_A ...]] [-b DIR_B [DIR_B ...]]
       [--hdf HDF] [--preload] [--holdout HOLDOUT] [--lowpass LOWPASS]
       [--gaussian GAUSSIAN] [--inv-gaussian INV_GAUSSIAN] [--deconvolve]
       [--deconv-patch DECONV_PATCH] [--pixel-cutoff PIXEL_CUTOFF]
       [-s PATCH_SIZE] [-p PATCH_PADDING] [--method {noise2noise,masked}]
       [--arch {unet,unet-small,unet2,unet3,fcnet,fcnet2,affine}]
       [--optim {adam,adagrad,sgd}] [--lr LR] [--criteria {L0,L1,L2}]
       [-c CROP] [--batch-size BATCH_SIZE] [--num-epochs NUM_EPOCHS]
       [--num-workers NUM_WORKERS] [-j NUM_THREADS]
       [micrographs [micrographs ...]]

positional arguments:
  micrographs           micrographs to denoise

optional arguments:
  -h, --help            show this help message and exit
  -d DEVICE, --device DEVICE
                        which device to use, set to -1 to force CPU (default:
                        0)
  -o OUTPUT, --output OUTPUT
                        directory to save denoised micrographs
  --suffix SUFFIX       add this suffix to each output file name. if no output
                        directory is specified, denoised micrographs are
                        written to the same location as the input with a
                        default suffix of ".denoised" (default: none)
  --format FORMAT_      output format for the images (default: mrc)
  --normalize           normalize the micrographs
  --stack               denoise a MRC stack rather than list of micorgraphs
  --save-prefix SAVE_PREFIX
                        path prefix to save denoising model
  -m MODEL [MODEL ...], --model MODEL [MODEL ...]
                        use pretrained denoising model(s). can accept
                        arguments for multiple models the outputs of which
                        will be averaged. pretrained model options are: unet,
                        unet-small, fcnn, affine. to use older unet version
                        specify unet-v0.2.1 (default: unet)
  -a DIR_A [DIR_A ...], --dir-a DIR_A [DIR_A ...]
                        directory of training images part A
  -b DIR_B [DIR_B ...], --dir-b DIR_B [DIR_B ...]
                        directory of training images part B
  --hdf HDF             path to HDF5 file containing training image stack as
                        an alternative to dirA/dirB
  --preload             preload micrographs into RAM
  --holdout HOLDOUT     fraction of training micrograph pairs to holdout for
                        validation (default: 0.1)
  --lowpass LOWPASS     lowpass filter micrographs by this amount (in pixels)
                        before applying the denoising filter. uses a hard
                        lowpass filter (i.e. sinc) (default: no lowpass
                        filtering)
  --gaussian GAUSSIAN   Gaussian filter micrographs with this standard
                        deviation (in pixels) before applying the denoising
                        filter (default: 0)
  --inv-gaussian INV_GAUSSIAN
                        Inverse Gaussian filter micrographs with this standard
                        deviation (in pixels) before applying the denoising
                        filter (default: 0)
  --deconvolve          apply optimal Gaussian deconvolution filter to each
                        micrograph before denoising
  --deconv-patch DECONV_PATCH
                        apply spatial covariance correction to micrograph to
                        this many patches (default: 1)
  --pixel-cutoff PIXEL_CUTOFF
                        set pixels >= this number of standard deviations away
                        from the mean to the mean. only used when set > 0
                        (default: 0)
  -s PATCH_SIZE, --patch-size PATCH_SIZE
                        denoises micrographs in patches of this size. not used
                        if <1 (default: -1)
  -p PATCH_PADDING, --patch-padding PATCH_PADDING
                        padding around each patch to remove edge artifacts
                        (default: 500)
  --method {noise2noise,masked}
                        denoising training method (default: noise2noise)
  --arch {unet,unet-small,unet2,unet3,fcnet,fcnet2,affine}
                        denoising model architecture (default: unet)
  --optim {adam,adagrad,sgd}
                        optimizer (default: adagrad)
  --lr LR               learning rate for the optimizer (default: 0.001)
  --criteria {L0,L1,L2}
                        training criteria (default: L2)
  -c CROP, --crop CROP  training crop size (default: 800)
  --batch-size BATCH_SIZE
                        training batch size (default: 4)
  --num-epochs NUM_EPOCHS
                        number of training epochs (default: 100)
  --num-workers NUM_WORKERS
                        number of threads to use for loading data during
                        training (default: 16)
  -j NUM_THREADS, --num-threads NUM_THREADS
                        number of threads for pytorch, 0 uses pytorch
                        defaults, <0 uses all cores (default: 0)
